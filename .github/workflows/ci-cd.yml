name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: ./backend
        env:
          GEMINI_API_KEY: "fake-key-for-testing"
        run: |
          python -m pytest tests/ -v

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Type check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-docker:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: scientific-search-backend:latest

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: scientific-search-frontend:latest

  test-docker-compose:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "GEMINI_API_KEY=fake-key-for-testing" > .env

      - name: Build and start services
        run: |
          docker compose up --build -d

      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 30

      - name: Check running containers
        run: |
          docker compose ps

      - name: Test backend health
        run: |
          echo "Testing backend on port 8000..."
          curl -f http://localhost:8000/ || exit 1

      - name: Test frontend health
        run: |
          echo "Testing frontend on port 80..."
          curl -f http://localhost:80/ || exit 1

      - name: View logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker compose logs backend
          echo "=== Frontend Logs ==="
          docker compose logs frontend

      - name: Stop services
        if: always()
        run: |
          docker compose down
